// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const apiKeyPublicIdTaken = `-- name: ApiKeyPublicIdTaken :one
SELECT
    CASE WHEN EXISTS (
        SELECT 1 FROM api_key WHERE public_id=$1
    ) THEN true ELSE false END
`

func (q *Queries) ApiKeyPublicIdTaken(ctx context.Context, publicID string) (bool, error) {
	row := q.db.QueryRow(ctx, apiKeyPublicIdTaken, publicID)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const createApiKey = `-- name: CreateApiKey :exec
INSERT INTO api_key (user_id, public_id, secret_hash, secret_salt)
VALUES ($1, $2, $3, $4)
`

type CreateApiKeyParams struct {
	UserID     uuid.UUID
	PublicID   string
	SecretHash []byte
	SecretSalt []byte
}

func (q *Queries) CreateApiKey(ctx context.Context, arg CreateApiKeyParams) error {
	_, err := q.db.Exec(ctx, createApiKey,
		arg.UserID,
		arg.PublicID,
		arg.SecretHash,
		arg.SecretSalt,
	)
	return err
}

const createPasswordAuth = `-- name: CreatePasswordAuth :exec
INSERT INTO password_auth (user_id, pw_hash, pw_salt) VALUES ($1, $2, $3)
`

type CreatePasswordAuthParams struct {
	UserID uuid.UUID
	PwHash []byte
	PwSalt []byte
}

func (q *Queries) CreatePasswordAuth(ctx context.Context, arg CreatePasswordAuthParams) error {
	_, err := q.db.Exec(ctx, createPasswordAuth, arg.UserID, arg.PwHash, arg.PwSalt)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user_account (email, first_name, last_name) VALUES ($1, $2, $3) RETURNING id
`

type CreateUserParams struct {
	Email     string
	FirstName string
	LastName  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.FirstName, arg.LastName)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const emailTaken = `-- name: EmailTaken :one
SELECT
    CASE WHEN EXISTS (
        SELECT 1
        FROM user_account
        WHERE email = $1
    ) THEN true ELSE false END
`

func (q *Queries) EmailTaken(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, emailTaken, email)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const findApiKey = `-- name: FindApiKey :one
SELECT user_id, public_id, secret_hash, secret_salt
FROM api_key
WHERE public_id=$1
`

type FindApiKeyRow struct {
	UserID     uuid.UUID
	PublicID   string
	SecretHash []byte
	SecretSalt []byte
}

func (q *Queries) FindApiKey(ctx context.Context, publicID string) (FindApiKeyRow, error) {
	row := q.db.QueryRow(ctx, findApiKey, publicID)
	var i FindApiKeyRow
	err := row.Scan(
		&i.UserID,
		&i.PublicID,
		&i.SecretHash,
		&i.SecretSalt,
	)
	return i, err
}

const getPasswordAuth = `-- name: GetPasswordAuth :one
SELECT ua.id, pa.pw_hash, pa.pw_salt
FROM user_account ua
JOIN password_auth pa ON pa.user_id = ua.id
WHERE ua.email=$1
`

type GetPasswordAuthRow struct {
	ID     uuid.UUID
	PwHash []byte
	PwSalt []byte
}

func (q *Queries) GetPasswordAuth(ctx context.Context, email string) (GetPasswordAuthRow, error) {
	row := q.db.QueryRow(ctx, getPasswordAuth, email)
	var i GetPasswordAuthRow
	err := row.Scan(&i.ID, &i.PwHash, &i.PwSalt)
	return i, err
}

const getUserInfo = `-- name: GetUserInfo :one
SELECT first_name, last_name FROM user_account WHERE id=$1
`

type GetUserInfoRow struct {
	FirstName string
	LastName  string
}

func (q *Queries) GetUserInfo(ctx context.Context, id uuid.UUID) (GetUserInfoRow, error) {
	row := q.db.QueryRow(ctx, getUserInfo, id)
	var i GetUserInfoRow
	err := row.Scan(&i.FirstName, &i.LastName)
	return i, err
}
